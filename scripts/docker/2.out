> use tutorial
switched to db tutorial
> db.users.insert({username:"smith"})
WriteResult({ "nInserted" : 1 })
> db.users.find()
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith" }
> db.users.insert({username:"jones"})
WriteResult({ "nInserted" : 1 })
> db.users.count()
2
> db.users.find()
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith" }
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones" }
> db.users.find({username:"jones"})
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones" }
> db.users.find({_id:ObjectId("5f2f9a68c264e4b3c4122b83"),
... username:"smith"})
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith" }
> db.users.find()
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith" }
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones" }
> db.users.find({})
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith" }
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones" }
> db.users.update({username:"smith"}, {$set:{country:"Canada"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.users.find({username:"smith"})
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith", "country" : "Canada" }
> db.users.find().pretty()
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones" }
{
	"_id" : ObjectId("5f2f9a68c264e4b3c4122b83"),
	"username" : "smith",
	"country" : "Canada"
}
> db.users.update({username:"smith"},
... {
... $set: {
... favorites: {
... cities:["Chicago", "Cheyenne"],
... movies:["Casablanca", "For a Few Dollars More", "The Sting"]
... }
... }
... })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.users.update({username:"jones"},
... {
... $set:{
... favorites:{
... movies:["Casablanca", "Rocky"]
... }
... }
... })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.users.find().pretty()
{
	"_id" : ObjectId("5f2f9a68c264e4b3c4122b83"),
	"username" : "smith",
	"country" : "Canada",
	"favorites" : {
		"cities" : [
			"Chicago",
			"Cheyenne"
		],
		"movies" : [
			"Casablanca",
			"For a Few Dollars More",
			"The Sting"
		]
	}
}
{
	"_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"),
	"username" : "jones",
	"favorites" : {
		"movies" : [
			"Casablanca",
			"Rocky"
		]
	}
}
> db.users.find({"favorites.movies":"Casablanca"})
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith", "country" : "Canada", "favorites" : { "cities" : [ "Chicago", "Cheyenne" ], "movies" : [ "Casablanca", "For a Few Dollars More", "The Sting" ] } }
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones", "favorites" : { "movies" : [ "Casablanca", "Rocky" ] } }
> db.users.find({"favorites.movies":"Casablanca"}).pretty()
{
	"_id" : ObjectId("5f2f9a68c264e4b3c4122b83"),
	"username" : "smith",
	"country" : "Canada",
	"favorites" : {
		"cities" : [
			"Chicago",
			"Cheyenne"
		],
		"movies" : [
			"Casablanca",
			"For a Few Dollars More",
			"The Sting"
		]
	}
}
{
	"_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"),
	"username" : "jones",
	"favorites" : {
		"movies" : [
			"Casablanca",
			"Rocky"
		]
	}
}
> db.users.find({"favorites.movies":"Casablanca"})
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith", "country" : "Canada", "favorites" : { "cities" : [ "Chicago", "Cheyenne" ], "movies" : [ "Casablanca", "For a Few Dollars More", "The Sting" ] } }
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones", "favorites" : { "movies" : [ "Casablanca", "Rocky" ] } }
> db.users.update({"favorites.movies":"Casablanca"},
... {$addToSet: {"favorites.movies": "The Maltese Falcon"} },
... false,
... true )
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })
> db.users.find({"favorites.movies":"Casablanca"})
{ "_id" : ObjectId("5f2f9a68c264e4b3c4122b83"), "username" : "smith", "country" : "Canada", "favorites" : { "cities" : [ "Chicago", "Cheyenne" ], "movies" : [ "Casablanca", "For a Few Dollars More", "The Sting", "The Maltese Falcon" ] } }
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones", "favorites" : { "movies" : [ "Casablanca", "Rocky", "The Maltese Falcon" ] } }
> db.users.find({"favorites.movies":"Casablanca"}).pretty()
{
	"_id" : ObjectId("5f2f9a68c264e4b3c4122b83"),
	"username" : "smith",
	"country" : "Canada",
	"favorites" : {
		"cities" : [
			"Chicago",
			"Cheyenne"
		],
		"movies" : [
			"Casablanca",
			"For a Few Dollars More",
			"The Sting",
			"The Maltese Falcon"
		]
	}
}
{
	"_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"),
	"username" : "jones",
	"favorites" : {
		"movies" : [
			"Casablanca",
			"Rocky",
			"The Maltese Falcon"
		]
	}
}
> db.foo.remove({})
WriteResult({ "nRemoved" : 0 })
> db.users.remove({"favorites.cities":"Cheyenne"})
WriteResult({ "nRemoved" : 1 })
> db.users.find()
{ "_id" : ObjectId("5f2f9a7ec264e4b3c4122b84"), "username" : "jones", "favorites" : { "movies" : [ "Casablanca", "Rocky", "The Maltese Falcon" ] } }
> db.users.drop()
true
> help
	db.help()                    help on db methods
	db.mycoll.help()             help on collection methods
	sh.help()                    sharding helpers
	rs.help()                    replica set helpers
	help admin                   administrative help
	help connect                 connecting to a db help
	help keys                    key shortcuts
	help misc                    misc things to know
	help mr                      mapreduce

	show dbs                     show database names
	show collections             show collections in current database
	show users                   show users in current database
	show profile                 show most recent system.profile entries with time >= 1ms
	show logs                    show the accessible logger names
	show log [name]              prints out the last segment of log in memory, 'global' is default
	use <db_name>                set current database
	db.foo.find()                list objects in collection foo
	db.foo.find( { a : 1 } )     list objects in foo where a == 1
	it                           result of the last line evaluated; use to further iterate
	DBQuery.shellBatchSize = x   set default number of items to display on shell
	exit                         quit the mongo shell
> db.help()
DB methods:
	db.adminCommand(nameOrDocument) - switches to 'admin' db, and runs command [just calls db.runCommand(...)]
	db.aggregate([pipeline], {options}) - performs a collectionless aggregation on this database; returns a cursor
	db.auth(username, password)
	db.cloneDatabase(fromhost)
	db.commandHelp(name) returns the help for the command
	db.copyDatabase(fromdb, todb, fromhost)
	db.createCollection(name, {size: ..., capped: ..., max: ...})
	db.createView(name, viewOn, [{$operator: {...}}, ...], {viewOptions})
	db.createUser(userDocument)
	db.currentOp() displays currently executing operations in the db
	db.dropDatabase()
	db.eval() - deprecated
	db.fsyncLock() flush data to disk and lock server for backups
	db.fsyncUnlock() unlocks server following a db.fsyncLock()
	db.getCollection(cname) same as db['cname'] or db.cname
	db.getCollectionInfos([filter]) - returns a list that contains the names and options of the db's collections
	db.getCollectionNames()
	db.getLastError() - just returns the err msg string
	db.getLastErrorObj() - return full status object
	db.getLogComponents()
	db.getMongo() get the server connection object
	db.getMongo().setSlaveOk() allow queries on a replication slave server
	db.getName()
	db.getPrevError()
	db.getProfilingLevel() - deprecated
	db.getProfilingStatus() - returns if profiling is on and slow threshold
	db.getReplicationInfo()
	db.getSiblingDB(name) get the db at the same server as this one
	db.getWriteConcern() - returns the write concern used for any operations on this db, inherited from server object if set
	db.hostInfo() get details about the server's host
	db.isMaster() check replica primary status
	db.killOp(opid) kills the current operation in the db
	db.listCommands() lists all the db commands
	db.loadServerScripts() loads all the scripts in db.system.js
	db.logout()
	db.printCollectionStats()
	db.printReplicationInfo()
	db.printShardingStatus()
	db.printSlaveReplicationInfo()
	db.dropUser(username)
	db.repairDatabase()
	db.resetError()
	db.runCommand(cmdObj) run a database command.  if cmdObj is a string, turns it into {cmdObj: 1}
	db.serverStatus()
	db.setLogLevel(level,<component>)
	db.setProfilingLevel(level,slowms) 0=off 1=slow 2=all
	db.setWriteConcern(<write concern doc>) - sets the write concern for writes to the db
	db.unsetWriteConcern(<write concern doc>) - unsets the write concern for writes to the db
	db.setVerboseShell(flag) display extra information in shell output
	db.shutdownServer()
	db.stats()
	db.version() current version of the server
> for(i=0; i<20000; i++){
... db.numbers.save({num: i});
... }
WriteResult({ "nInserted" : 1 })
> db.numbers.count()
20000
> db.numbers.find()
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b85"), "num" : 0 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b86"), "num" : 1 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b87"), "num" : 2 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b88"), "num" : 3 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b89"), "num" : 4 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b8a"), "num" : 5 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b8b"), "num" : 6 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b8c"), "num" : 7 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b8d"), "num" : 8 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b8e"), "num" : 9 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b8f"), "num" : 10 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b90"), "num" : 11 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b91"), "num" : 12 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b92"), "num" : 13 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b93"), "num" : 14 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b94"), "num" : 15 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b95"), "num" : 16 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b96"), "num" : 17 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b97"), "num" : 18 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b98"), "num" : 19 }
Type "it" for more
> it
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b99"), "num" : 20 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9a"), "num" : 21 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9b"), "num" : 22 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9c"), "num" : 23 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9d"), "num" : 24 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9e"), "num" : 25 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9f"), "num" : 26 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba0"), "num" : 27 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba1"), "num" : 28 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba2"), "num" : 29 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba3"), "num" : 30 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba4"), "num" : 31 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba5"), "num" : 32 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba6"), "num" : 33 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba7"), "num" : 34 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba8"), "num" : 35 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122ba9"), "num" : 36 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122baa"), "num" : 37 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122bab"), "num" : 38 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122bac"), "num" : 39 }
Type "it" for more
> db.numbers.(find({num: 500})
... ;
... ^C

> db.numbers.find({num:500})
{ "_id" : ObjectId("5f2fbbdfc264e4b3c4122d79"), "num" : 500 }
> db.numbers.find({num: {"$gt":19995}})
{ "_id" : ObjectId("5f2fbbe8c264e4b3c41279a1"), "num" : 19996 }
{ "_id" : ObjectId("5f2fbbe8c264e4b3c41279a2"), "num" : 19997 }
{ "_id" : ObjectId("5f2fbbe8c264e4b3c41279a3"), "num" : 19998 }
{ "_id" : ObjectId("5f2fbbe8c264e4b3c41279a4"), "num" : 19999 }
> db.numbers.find({num: {"$ge":19995}})
Error: error: {
	"ok" : 0,
	"errmsg" : "unknown operator: $ge",
	"code" : 2,
	"codeName" : "BadValue"
}
> db.numbers.find({num: {"$gt":20,"$lt":25}})
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9a"), "num" : 21 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9b"), "num" : 22 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9c"), "num" : 23 }
{ "_id" : ObjectId("5f2fbbdec264e4b3c4122b9d"), "num" : 24 }
> 

> db.numbers.find({num: {"$gt":19995}}).explain("executionStats")
{
	"queryPlanner" : {
		"plannerVersion" : 1,
		"namespace" : "tutorial.numbers",
		"indexFilterSet" : false,
		"parsedQuery" : {
			"num" : {
				"$gt" : 19995
			}
		},
		"winningPlan" : {
			"stage" : "COLLSCAN",
			"filter" : {
				"num" : {
					"$gt" : 19995
				}
			},
			"direction" : "forward"
		},
		"rejectedPlans" : [ ]
	},
	"executionStats" : {
		"executionSuccess" : true,
		"nReturned" : 4,
		"executionTimeMillis" : 13,
		"totalKeysExamined" : 0,
		"totalDocsExamined" : 20000,
		"executionStages" : {
			"stage" : "COLLSCAN",
			"filter" : {
				"num" : {
					"$gt" : 19995
				}
			},
			"nReturned" : 4,
			"executionTimeMillisEstimate" : 10,
			"works" : 20002,
			"advanced" : 4,
			"needTime" : 19997,
			"needYield" : 0,
			"saveState" : 156,
			"restoreState" : 156,
			"isEOF" : 1,
			"invalidates" : 0,
			"direction" : "forward",
			"docsExamined" : 20000
		}
	},
	"serverInfo" : {
		"host" : "05649cd99c94",
		"port" : 27017,
		"version" : "3.6.19",
		"gitVersion" : "41b289ff734a926e784d6ab42c3129f59f40d5b4"
	},
	"ok" : 1
}
> 
> db.numbers.createIndex({num: 1})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> db.numbers.getIndexes()
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "tutorial.numbers"
	},
	{
		"v" : 2,
		"key" : {
			"num" : 1
		},
		"name" : "num_1",
		"ns" : "tutorial.numbers"
	}
]
> db.numbers.find({num: {"$gt":19995}}).explain("executionStats")
{
	"queryPlanner" : {
		"plannerVersion" : 1,
		"namespace" : "tutorial.numbers",
		"indexFilterSet" : false,
		"parsedQuery" : {
			"num" : {
				"$gt" : 19995
			}
		},
		"winningPlan" : {
			"stage" : "FETCH",
			"inputStage" : {
				"stage" : "IXSCAN",
				"keyPattern" : {
					"num" : 1
				},
				"indexName" : "num_1",
				"isMultiKey" : false,
				"isUnique" : false,
				"isSparse" : false,
				"isPartial" : false,
				"indexVersion" : 2,
				"direction" : "forward",
				"indexBounds" : {
					"num" : [
						"(19995.0, inf.0]"
					]
				}
			}
		},
		"rejectedPlans" : [ ]
	},
	"executionStats" : {
		"executionSuccess" : true,
		"nReturned" : 4,
		"executionTimeMillis" : 0,
		"totalKeysExamined" : 4,
		"totalDocsExamined" : 4,
		"executionStages" : {
			"stage" : "FETCH",
			"nReturned" : 4,
			"executionTimeMillisEstimate" : 0,
			"works" : 5,
			"advanced" : 4,
			"needTime" : 0,
			"needYield" : 0,
			"saveState" : 0,
			"restoreState" : 0,
			"isEOF" : 1,
			"invalidates" : 0,
			"docsExamined" : 4,
			"alreadyHasObj" : 0,
			"inputStage" : {
				"stage" : "IXSCAN",
				"nReturned" : 4,
				"executionTimeMillisEstimate" : 0,
				"works" : 5,
				"advanced" : 4,
				"needTime" : 0,
				"needYield" : 0,
				"saveState" : 0,
				"restoreState" : 0,
				"isEOF" : 1,
				"invalidates" : 0,
				"keyPattern" : {
					"num" : 1
				},
				"indexName" : "num_1",
				"isMultiKey" : false,
				"isUnique" : false,
				"isSparse" : false,
				"isPartial" : false,
				"indexVersion" : 2,
				"direction" : "forward",
				"indexBounds" : {
					"num" : [
						"(19995.0, inf.0]"
					]
				},
				"keysExamined" : 4,
				"seeks" : 1,
				"dupsTested" : 0,
				"dupsDropped" : 0,
				"seenInvalidated" : 0
			}
		}
	},
	"serverInfo" : {
		"host" : "05649cd99c94",
		"port" : 27017,
		"version" : "3.6.19",
		"gitVersion" : "41b289ff734a926e784d6ab42c3129f59f40d5b4"
	},
	"ok" : 1
}
> show dbs
admin     0.078GB
config    0.078GB
local     0.078GB
tutorial  0.078GB
> show collections
numbers
system.indexes
> db.stats()
{
	"db" : "tutorial",
	"collections" : 3,
	"views" : 0,
	"objects" : 20006,
	"avgObjSize" : 48.012796161151655,
	"dataSize" : 960544,
	"storageSize" : 2805760,
	"numExtents" : 7,
	"indexes" : 2,
	"indexSize" : 1169168,
	"fileSize" : 67108864,
	"nsSizeMB" : 16,
	"extentFreeList" : {
		"num" : 0,
		"totalSize" : 0
	},
	"dataFileVersion" : {
		"major" : 4,
		"minor" : 22
	},
	"fsUsedSize" : 38647042048,
	"fsTotalSize" : 250966470656,
	"ok" : 1
}
> db.numbers.stats()
{
	"ns" : "tutorial.numbers",
	"size" : 960064,
	"count" : 20000,
	"avgObjSize" : 48,
	"numExtents" : 5,
	"storageSize" : 2793472,
	"lastExtentSize" : 2097152,
	"paddingFactor" : 1,
	"paddingFactorNote" : "paddingFactor is unused and unmaintained in 3.0. It remains hard coded to 1.0 for compatibility only.",
	"userFlags" : 1,
	"capped" : false,
	"nindexes" : 2,
	"totalIndexSize" : 1169168,
	"indexSizes" : {
		"_id_" : 654080,
		"num_1" : 515088
	},
	"ok" : 1
}
> 

> db.stats()
{
	"db" : "tutorial",
	"collections" : 3,
	"views" : 0,
	"objects" : 20006,
	"avgObjSize" : 48.012796161151655,
	"dataSize" : 960544,
	"storageSize" : 2805760,
	"numExtents" : 7,
	"indexes" : 2,
	"indexSize" : 1169168,
	"fileSize" : 67108864,
	"nsSizeMB" : 16,
	"extentFreeList" : {
		"num" : 0,
		"totalSize" : 0
	},
	"dataFileVersion" : {
		"major" : 4,
		"minor" : 22
	},
	"fsUsedSize" : 38658842624,
	"fsTotalSize" : 250966470656,
	"ok" : 1
}
> db.runCommand({dbstats:1})
{
	"db" : "tutorial",
	"collections" : 3,
	"views" : 0,
	"objects" : 20006,
	"avgObjSize" : 48.012796161151655,
	"dataSize" : 960544,
	"storageSize" : 2805760,
	"numExtents" : 7,
	"indexes" : 2,
	"indexSize" : 1169168,
	"fileSize" : 67108864,
	"nsSizeMB" : 16,
	"extentFreeList" : {
		"num" : 0,
		"totalSize" : 0
	},
	"dataFileVersion" : {
		"major" : 4,
		"minor" : 22
	},
	"fsUsedSize" : 38658846720,
	"fsTotalSize" : 250966470656,
	"ok" : 1
}
> db.runCommand({collstats:"numbers"})
{
	"ns" : "tutorial.numbers",
	"size" : 960064,
	"count" : 20000,
	"avgObjSize" : 48,
	"numExtents" : 5,
	"storageSize" : 2793472,
	"lastExtentSize" : 2097152,
	"paddingFactor" : 1,
	"paddingFactorNote" : "paddingFactor is unused and unmaintained in 3.0. It remains hard coded to 1.0 for compatibility only.",
	"userFlags" : 1,
	"capped" : false,
	"nindexes" : 2,
	"indexDetails" : {
		
	},
	"totalIndexSize" : 1169168,
	"indexSizes" : {
		"_id_" : 654080,
		"num_1" : 515088
	},
	"ok" : 1
}
> db.runCommand()
2020-08-09T09:47:02.442+0000 E QUERY    [thread1] Error: First argument to DB.runCommand() must be either an object or a string: (type: undefined): undefined :
DB.prototype._mergeCommandOptions@src/mongo/shell/db.js:88:1
DB.prototype.runCommand@src/mongo/shell/db.js:153:25
@(shell):1:1
> db.runCommand
function (obj, extra, queryOptions) {
        "use strict";

        // Support users who call this function with a string commandName, e.g.
        // db.runCommand("commandName", {arg1: "value", arg2: "value"}).
        var mergedObj = this._mergeCommandOptions(obj, extra);

        // if options were passed (i.e. because they were overridden on a collection), use them.
        // Otherwise use getQueryOptions.
        var options =
            (typeof(queryOptions) !== "undefined") ? queryOptions : this.getQueryOptions();

        try {
            return this._runCommandImpl(this._name, mergedObj, options);
        } catch (ex) {
            // When runCommand flowed through query, a connection error resulted in the message
            // "error doing query: failed". Even though this message is arguably incorrect
            // for a command failing due to a connection failure, we preserve it for backwards
            // compatibility. See SERVER-18334 for details.
            if (ex.message.indexOf("network error") >= 0) {
                throw new Error("error doing query: failed: " + ex.message);
            }
            throw ex;
        }
    }
> 
> db.$cmd.findOne({collstats:"numbers"});
{
	"ns" : "tutorial.numbers",
	"size" : 960064,
	"count" : 20000,
	"avgObjSize" : 48,
	"numExtents" : 5,
	"storageSize" : 2793472,
	"lastExtentSize" : 2097152,
	"paddingFactor" : 1,
	"paddingFactorNote" : "paddingFactor is unused and unmaintained in 3.0. It remains hard coded to 1.0 for compatibility only.",
	"userFlags" : 1,
	"capped" : false,
	"nindexes" : 2,
	"indexDetails" : {
		
	},
	"totalIndexSize" : 1169168,
	"indexSizes" : {
		"_id_" : 654080,
		"num_1" : 515088
	},
	"ok" : 1
}
> db.numbers.get
tutorial.numbers.get
> db.numbers.get
db.numbers.getCollection(          db.numbers.getIndexKeys(           db.numbers.getMongo(               db.numbers.getQueryOptions(        db.numbers.getSplitKeysForChunks(
db.numbers.getDB(                  db.numbers.getIndexSpecs(          db.numbers.getName(                db.numbers.getShardDistribution(   db.numbers.getWriteConcern(
db.numbers.getDiskStorageStats(    db.numbers.getIndexes(             db.numbers.getPagesInRAM(          db.numbers.getShardVersion(
db.numbers.getFullName(            db.numbers.getIndices(             db.numbers.getPlanCache(           db.numbers.getSlaveOk(
> db.numbers.get
> db.numbers.save({num:123123123});
WriteResult({ "nInserted" : 1 })
> db.numbers.save
function (obj, opts) {
    if (obj == null)
        throw Error("can't save a null");

    if (typeof(obj) == "number" || typeof(obj) == "string")
        throw Error("can't save a number or string");

    if (typeof(obj._id) == "undefined") {
        obj._id = new ObjectId();
        return this.insert(obj, opts);
    } else {
        return this.update({_id: obj._id}, obj, Object.merge({upsert: true}, opts));
    }
}

